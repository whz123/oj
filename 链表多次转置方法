————————《题目》————————
问题 H: 大爱线性表
时间限制: 1 Sec  内存限制: 128 MB
提交: 3990  解决: 874
[提交][状态][讨论版]
题目描述
不少参赛同学刚学数据结构，对线性表最是熟悉不过。这里我们给线性表增加两个特殊的操作，第一个是‘R’ 操作，表示逆转整个表，如果表长为Ｌ，原来的第ｉ个元素变成第Ｌ-i+1个元素。第二个操作是‘D’，表示删除表的第一个元素，如果表为空，则返回一个“error”信息。我们可以给出一系列的‘R’ 和‘D’组合，例如“RDD”表示先逆转表，然后删除最前面的两个元素。

本题的任务是给定表和一个操作串S，求出执行S后的表，如果中途出现‘D’操作于空表，输出“error”。

输入
 第一行是一个整数，表示有多少组数据。每组测试数据格式如下：

(1)第一行是操作串S，有‘R’ 和‘D’组成，S的长度大于0，不超过100 000。

(2)第二行是整数n，表示初始时表中的元素个数。n的值不小于0，不超过100 000。

(3) 第三行是包含n个元素的表，用‘[’ 和 ‘]’括起来，元素之间用逗号分开。各元素值在[1,100]之间。

输出
 对于每一组测试数据，输出执行S后的表（格式要求同输入）或者“error”。


样例输入
4
RDD
4
[1,2,3,4]
DD
1
[42]
RRD
6
[1,1,2,3,5,8]
D
0
[]
样例输出
[2,1]
error
[1,2,3,5,8]
error

————————《解题难点》————————
多次转置如何才能不超时
————————《解题方法》————————
多次转置可以用双向链表
————————《   代码    》————————
#include<iostream>
#include<stdio.h>
using namespace std;

typedef struct  node
{
	int m;
	node *next;
	node *prior;
}*linklist;
void create(int m, linklist &L,linklist &L1,linklist &L2)
{
	char c;
	node *p, *q;
	L = new node;
	L->next = NULL;
	L->prior = NULL;
	L->m = -1;
	L1 = L;
	p = L;
	while (m--)
	{
		q = new node;
		cin >> q->m;
		cin >> c;
		q->next = NULL;
		q->prior = p;
		p->next = q;
		p = q;
	}
	getchar();
	q = new node;
	q->next = NULL;
	q->prior = p;
	q->m = -1;
	p->next = q;
	L2 = q;
}
void R(linklist &L,linklist L1,linklist L2,int &flag1)
{
	if (flag1 == 0)
	{
		L = L2;
		flag1 = 1;
	}
	else {
		L = L1;
		flag1 = 0;
	}
}
int D(linklist &L, linklist L1, linklist L2)
{
	if (L == L1)
	{if (L->next->next == NULL)
	{
		return -1;
	}
	node *r = L->next;
	L->next = r->next;
	r->next->prior = L;
	delete r;
	return 1;
    }
	else if (L == L2)
	{
		if (L->prior->prior == NULL)
		{
			return -1;
		}
		node *r = L->prior;
		L->prior = r->prior;
		r->prior->next = L;
		delete r;
		return 1;
	}
}
int main()
{
	int m;
	cin >> m;
	while (m--)
	{
		int flag1 = 0;
		char s[100100], a, b;
		int n;
		cin >> s;
		cin >> n;
		cin >> a;
		linklist L,L1,L2;
		create(n, L,L1,L2);
		int flag = 0;
		for (int i = 0; s[i]; i++)
		{
			if (s[i] == 'D')
			{
				if (D(L,L1,L2) == -1)
				{
					cout << "error\n";
					flag = 1;
					break;
				}
			}
			else {
				R(L,L1,L2,flag1);
			}
		}
		if (flag == 0&&L==L1)
		{
			node *p = L->next;
			if (p->m != -1)
			{
				cout << "[" << p->m;
				p = p->next;
				while (p->m != -1)
				{
					cout << "," << p->m;
					p = p->next;
				}
				cout << "]\n";
			}
			else {
				cout << "[]\n";
			}
		}
		else if(flag==0&&L==L2)
		{
			node *p = L->prior;
			if (p->m != -1)
			{
				cout << "[" << p->m;
				p = p->prior;
				while (p->m != -1)
				{
					cout << "," << p->m;
					p = p->prior;
				}
				cout << "]\n";
			}
			else {
				cout << "[]\n";
			}
		}

	}
	return 0;
}
