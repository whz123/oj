————————————————————《题目》————————————————————————
小猴子下落
时间限制：3000 ms  |  内存限制：65535 KB
难度：3
描述
有一颗二叉树，最大深度为D,且所有叶子的深度都相同。所有结点从左到右从上到下的编号为1,2,3，·····，2的D次方减1。在结点1处放一个小猴子，它会往下跑。每个内结点上都有一个开关，初始全部关闭，当每次有小猴子跑到一个开关上时，它的状态都会改变，当到达一个内结点时，如果开关关闭，小猴子往左走，否则往右走，直到走到叶子结点。

一些小猴子从结点1处开始往下跑，最后一个小猴儿会跑到哪里呢？

输入
输入二叉树叶子的深度D,和小猴子数目I，假设I不超过整棵树的叶子个数，D<=20.最终以 0 0 结尾
输出
输出第I个小猴子所在的叶子编号。
样例输入
4 2
3 4
0 0
样例输出
12
7
—————————————————————《代码》——————————————————————
#include<cmath>
#include<iostream>
#include<stdio.h>
using namespace std;
#define Max 100000
typedef struct node
{
	int key=0;
	node *lchild,*rchild;
	int number;
}node,*hufffmanTree;
void createHuffmanTree(hufffmanTree &T, int D)
{
	node *queue[Max],*q;
	int front, rear;
	front = rear = 0;
	for (int i = 1; i <= pow(2, D) - 1; i++)
	{
		q = new node;
		q->number = i;
		q->rchild=q->lchild = NULL;
		queue[rear] = q;
		if ((rear + 1) % Max == front)
		{
			cout << "满了";
		}
		else if (rear == front)
		{
			T = q;
		}
		else {
			if (rear % 2 == 1)
			{
				queue[front]->lchild = queue[rear];
			}
			else
			{
				queue[front]->rchild = queue[rear];
				front = (front + 1) % Max;
			}
		}
		rear = (rear + 1) % Max;
	}
}
void traverseHuffmanTree(hufffmanTree T, int &z)
{
	while (T->rchild != NULL || T->rchild != NULL)
	{
		if (T->key == 0)
		{
			T->key = 1;
			T = T->lchild;
		}
		else
		{
			T->key = 0;
			T = T->rchild;
		}
	}
	z = T->number;
}
int main()
{
	int D, I;
	while (cin >> D >> I && (D != 0 || I != 0))
	{
		hufffmanTree T;
		createHuffmanTree(T, D);
		int z = 0;
		for (int i = 0; i < I; i++)
		{
			traverseHuffmanTree(T, z);
		}
		cout << z << endl;
	}
	return 0;
}
